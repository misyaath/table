#version: '3.7'

networks:
    platform-network:
        driver: bridge
        name: platform-network

volumes:
    mysql_data:
        name: table_mysql-data
    redis-data:
        name: table_redis-data
    percona_data:
        name: percona_data
    certs:
        driver: local
    esdata01:
        driver: local
    kibanadata:
        driver: local

services:

    setup:
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
        user: "0"
        command: >
            bash -c '
              if [ x${ELASTIC_PASSWORD} == x ]; then
                echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
                exit 1;
              elif [ x${KIBANA_PASSWORD} == x ]; then
                echo "Set the KIBANA_PASSWORD environment variable in the .env file";
                exit 1;
              fi;
              if [ ! -f config/certs/ca.zip ]; then
                echo "Creating CA";
                bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
                unzip config/certs/ca.zip -d config/certs;
              fi;
              if [ ! -f config/certs/certs.zip ]; then
                echo "Creating certs";
                echo -ne \
                "instances:\n"\
                "  - name: es01\n"\
                "    dns:\n"\
                "      - es01\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "  - name: es02\n"\
                "    dns:\n"\
                "      - es02\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "  - name: es03\n"\
                "    dns:\n"\
                "      - es03\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                > config/certs/instances.yml;
                bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
                unzip config/certs/certs.zip -d config/certs;
              fi;
              echo "Setting file permissions"
              chown -R root:root config/certs;
              find . -type d -exec chmod 750 \{\} \;;
              find . -type f -exec chmod 640 \{\} \;;
              echo "Waiting for Elasticsearch availability";
              until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
              echo "Setting kibana_system password";
              until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
              echo "All done!";
            '
        healthcheck:
            test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
            interval: 1s
            timeout: 5s
            retries: 120

    php:
        build:
            context: .
            dockerfile:
                ./docker/php/Dockerfile
            args:
                INSTALL_PHP_XDEBUG: ${INSTALL_XDEBUG:-false}
        image: table
        volumes:
            - certs:/usr/share/es/config/certs
            - ./:/var/www:delegated
            - ./docker/php/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf
            - ./docker/php/php/custom.ini.template:/usr/local/etc/php/conf.d/custom.ini.template
            - ./docker/php/php/php-cli.ini:/usr/local/etc/php/php-cli.ini
            - ./docker/php/php/healthcheck.ini:/usr/local/etc/php/healthcheck.ini
            - ./docker/php/startup.sh:/usr/local/bin/startup.sh
            - ./docker/php/custom-entrypoint.sh:/usr/local/bin/custom-entrypoint.sh:cached
            - ./docker/php/php/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
            - ./docker/php/php/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini
        environment:
            - PHP_SESSION_SAVE_HANDLER=files
            - PHP_SESSION_SAVE_PATH=/tmp
            - PHP_SEND_MAIL_PATH=""
        entrypoint: [ "/usr/local/bin/custom-entrypoint.sh" ]
        command: [ "php-fpm" ]
        depends_on:
            - mysql
        networks:
            - platform-network

    worker:
        image: table
        restart: always
        working_dir: /var/www/
        command: [ "php", "artisan", "queue:work" ]
        depends_on:
            - php
        volumes:
            - ./:/var/www
        networks:
            - platform-network

    nginx:
        build:
            context: .
            dockerfile:
                ./docker/nginx/Dockerfile
        volumes:
            - ./:/var/www:delegated
            - ./docker/nginx/ssl/app.portal.test:/etc/nginx/ssl
            - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./docker/nginx/templates/portal-ssl.conf.template:/etc/nginx/templates/portal.conf.template
        ports:
            - "443:443"
        environment:
            - NGINX_SERVER_NAME=${APP_DOMAIN}
            - NGINX_ROOT=/var/www/public
            - NGINX_CONTENT_EXPIRY=7d
            - NGINX_ACCESS_LOG=/var/log/nginx/access.log
            - NGINX_ERROR_LOG=/var/log/nginx/error.log error
            - NGINX_SECURITY_REPORT_URI=
            - NGINX_SSL_CERTIFICATE=/etc/nginx/ssl/dummy.crt
            - NGINX_SSL_CERTIFICATE_KEY=/etc/nginx/ssl/dummy.key
            - FAST_CGI_PASS=php
            - FAST_CGI_READ_TIMEOUT=600
            - FAST_CGI_SEND_TIMEOUT=600
            - NGINX_STATUS_WHITELIST=127.0.0.1
        depends_on:
            - php
        networks:
            platform-network:
                aliases:
                    - ${APP_DOMAIN}

    mysql:
        build:
            context: .
            dockerfile:
                ./docker/mysql/Dockerfile
        command: --default-authentication-plugin=mysql_native_password
        restart: unless-stopped
        tty: true
        ports:
            - "3306:3306"
        volumes:
            - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:cached
            - ./docker/mysql/custom-entrypoint.sh:/usr/local/bin/custom-entrypoint.sh:cached
            - ./mysql/data:/var/lib/mysql:delegated
            - ./mysql/data:/var/log/mysql
        entrypoint: [ "/usr/local/bin/custom-entrypoint.sh" ]
        environment:
            MYSQL_DATABASE: ${DB_DATABASE}
            MYSQL_USER: ${DB_USERNAME}
            MYSQL_PASSWORD: ${DB_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
            SERVICE_TAGS: dev
            SERVICE_NAME: mysql
        networks:
            - platform-network
        cap_add:
            - SYS_NICE
    redis:
        build:
            context: .
            dockerfile:
                ./docker/redis/Dockerfile
        command: [ "redis-server", "/usr/local/etc/redis/redis.conf", "--appendonly", "yes" ] # Redis notes : --appendonly persists the data
        ports:
            - "6379:6379"
        networks:
            - platform-network
        volumes:
            - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:cached
            - redis-data:/data:delegated
    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        container_name: zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
        ports:
            - "2181:2181"
        networks:
            - platform-network
    kafka:
        image: confluentinc/cp-kafka:latest
        container_name: kafka
        ports:
            - "9092:9092"
        environment:
            KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
            KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
            KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_CREATE_TOPICS: "baeldung:1:1"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        networks:
            - platform-network
    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        container_name: kakfka-ui
        volumes:
            - ./docker/kafka/kafka-ui/config.yml:/etc/kafkaui/dynamic_config.yaml
        ports:
            - "8080:8080"
        environment:
            DYNAMIC_CONFIG_ENABLED: true
        depends_on:
            - kafka
        networks:
            - platform-network
    mailhog:
        image: mailhog/mailhog:v1.0.1
        logging:
            driver: 'none'
        ports:
            - "1025:1025"
            - "8025:8025"
        networks:
            - platform-network
    percona:
        image: percona/pmm-server:2
        container_name: percona
        depends_on:
            - mysql
        networks:
            - platform-network
        ports:
            - 444:443
    es01:
        depends_on:
            setup:
                condition: service_healthy
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
            - esdata01:/usr/share/elasticsearch/data
        ports:
            - ${ES_PORT}:9200
        environment:
            - node.name=es01
            - cluster.name=${CLUSTER_NAME}
            - cluster.initial_master_nodes=es01
            - discovery.seed_hosts=es02,es03
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
            - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/es01/es01.key
            - xpack.security.http.ssl.certificate=certs/es01/es01.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/es01/es01.key
            - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
#            - xpack.license.self_generated.type=${LICENSE}
        mem_limit: ${MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test:
              [
                  "CMD-SHELL",
                  "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
              ]
            interval: 10s
            timeout: 10s
            retries: 120
        networks:
            - platform-network
    kibana:
        depends_on:
            es01:
                condition: service_healthy
        image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
        volumes:
            - certs:/usr/share/kibana/config/certs
            - kibanadata:/usr/share/kibana/data
        ports:
            - ${KIBANA_PORT}:5601
        environment:
            - SERVERNAME=kibana
            - ELASTICSEARCH_HOSTS=https://es01:9200
            - ELASTICSEARCH_USERNAME=kibana_system
            - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
            - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
        mem_limit: ${MEM_LIMIT}
        healthcheck:
            test:
              [
                  "CMD-SHELL",
                  "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
              ]
            interval: 10s
            timeout: 10s
            retries: 120
        networks:
            - platform-network
